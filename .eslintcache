[{"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\index.js":"1","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\App.js":"2","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\reportWebVitals.js":"3","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Player.js":"4","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Song.js":"5","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\LibrarySong.js":"6","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Library.js":"7","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Nav.js":"8","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\Data.js":"9","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\util.js":"10","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\Util.js":"11"},{"size":500,"mtime":1607197420728,"results":"12","hashOfConfig":"13"},{"size":2562,"mtime":1607458535711,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606879038992,"results":"15","hashOfConfig":"13"},{"size":4172,"mtime":1607459426750,"results":"16","hashOfConfig":"13"},{"size":327,"mtime":1607274396359,"results":"17","hashOfConfig":"13"},{"size":1661,"mtime":1607457061696,"results":"18","hashOfConfig":"13"},{"size":934,"mtime":1607371121691,"results":"19","hashOfConfig":"13"},{"size":490,"mtime":1607352311049,"results":"20","hashOfConfig":"13"},{"size":3809,"mtime":1607366077197,"results":"21","hashOfConfig":"13"},{"size":328,"mtime":1607369586361,"results":"22","hashOfConfig":"23"},{"size":328,"mtime":1607369586361,"results":"24","hashOfConfig":"23"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"xcs1ak",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fgp36e",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\index.js",[],["49","50"],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\App.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\reportWebVitals.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Player.js",["51"],"import React, { useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faForward, faBackward } from '@fortawesome/free-solid-svg-icons';\r\n// import { playAudio } from \"../Util\";\r\n\r\nconst Player = ({ setSongs, setCurrentSong, songs, currentSong, isPlaying, setIsPlaying, audioRef, setSongInfo, songInfo }) => {\r\n    //UseEffect\r\n    useEffect(() => {\r\n        //Add Active State\r\n        const newSongs = songs.map((song) => {\r\n            if (song.id === currentSong.id) {\r\n                return {\r\n                    ...song,\r\n                    active: true,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...song,\r\n                    active: false,\r\n                };\r\n            }\r\n        });\r\n\r\n        setSongs(newSongs);\r\n        if ((isPlaying) && audioRef.current.paused) {\r\n            audioRef.current.play()\r\n        }\r\n    }, [isPlaying, currentSong])//Changing when currentSong updates\r\n\r\n    //Event Handler\r\n    const playSongHandler = () => {\r\n        // const audio = document.querySelector('audio')\r\n        // console.log(audioRef.current);\r\n        // audioRef.current.play();\r\n        if (isPlaying) {\r\n            //using useRef to reference\r\n            audioRef.current.pause();\r\n            //set the isPlaying to opposite to what it was\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n        else {\r\n            audioRef.current.play();\r\n            //set the isPlaying to opposite to what it was\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n\r\n    //Time Formatting\r\n    const getTime = (time) => {\r\n        return `${Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)}`;\r\n    }\r\n\r\n    //Draggable track point\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({ ...songInfo, currentTime: e.target.value })\r\n    };\r\n\r\n    //Skipping Handler\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n        if (direction === 'skip-forward') {\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n        } else {\r\n            //Need to have reuturn if do if else\r\n            ((currentIndex - 1) % songs.length === -1) ? await setCurrentSong(songs[songs.length - 1]) : await setCurrentSong(songs[(currentIndex - 1)]);\r\n        }\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    //Add the styles\r\n    const trackAnim = {\r\n        transform: `translateX(${songInfo.animationPercentage}%)`,\r\n    }\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <div style={{ background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})` }}\r\n                    className=\"track\">\r\n                    <input\r\n                        min={0}\r\n                        max={songInfo.duration || 0}\r\n                        onChange={dragHandler}\r\n                        value={songInfo.currentTime}\r\n                        type=\"range\"\r\n                    />\r\n                    <div style={trackAnim} className=\"animate-track\"></div>\r\n                </div>\r\n                <p>{getTime(songInfo.duration || 0.00)}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon\r\n                    onClick={() => skipTrackHandler('skip-back')}\r\n                    className=\"skip-back\"\r\n                    size=\"2x\"\r\n                    icon={faBackward} />\r\n                <FontAwesomeIcon\r\n                    onClick={playSongHandler}\r\n                    className=\"play\" size=\"2x\"\r\n                    icon={isPlaying ? faPause : faPlay} />\r\n                <FontAwesomeIcon\r\n                    onClick={() => skipTrackHandler('skip-forward')}\r\n                    className=\"skip-forward\"\r\n                    size=\"2x\"\r\n                    icon={faForward} />\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Player;","D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Song.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\LibrarySong.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Library.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\components\\Nav.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\Data.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\util.js",[],"D:\\React\\React Learning\\Project 1\\music-wave-app\\src\\Util.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":28,"column":8,"nodeType":"58","endLine":28,"endColumn":32,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'audioRef', 'setSongs', and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [isPlaying, currentSong, songs, setSongs, audioRef]",{"range":"65","text":"66"},[952,976],"[isPlaying, currentSong, songs, setSongs, audioRef]"]